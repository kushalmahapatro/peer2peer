// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

abstract class Peer2Peer {
  Future<String> printHello({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrintHelloConstMeta;

  Future<int> add({required int a, required int b, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddConstMeta;

  Future<int> subtract({required int a, required int b, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSubtractConstMeta;

  Future<String> getIpOne({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetIpOneConstMeta;

  Stream<int> tick({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTickConstMeta;

  Stream<String> startP2P({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStartP2PConstMeta;
}

class Peer2PeerImpl implements Peer2Peer {
  final Peer2PeerPlatform _platform;
  factory Peer2PeerImpl(ExternalLibrary dylib) =>
      Peer2PeerImpl.raw(Peer2PeerPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory Peer2PeerImpl.wasm(FutureOr<WasmModule> module) =>
      Peer2PeerImpl(module as ExternalLibrary);
  Peer2PeerImpl.raw(this._platform);
  Future<String> printHello({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_print_hello(port_),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kPrintHelloConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrintHelloConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "print_hello",
        argNames: [],
      );

  Future<int> add({required int a, required int b, dynamic hint}) {
    var arg0 = api2wire_i32(a);
    var arg1 = api2wire_i32(b);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_add(port_, arg0, arg1),
      parseSuccessData: _wire2api_i32,
      parseErrorData: null,
      constMeta: kAddConstMeta,
      argValues: [a, b],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add",
        argNames: ["a", "b"],
      );

  Future<int> subtract({required int a, required int b, dynamic hint}) {
    var arg0 = api2wire_i32(a);
    var arg1 = api2wire_i32(b);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_subtract(port_, arg0, arg1),
      parseSuccessData: _wire2api_i32,
      parseErrorData: null,
      constMeta: kSubtractConstMeta,
      argValues: [a, b],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSubtractConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "subtract",
        argNames: ["a", "b"],
      );

  Future<String> getIpOne({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_ip_one(port_),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kGetIpOneConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetIpOneConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_ip_one",
        argNames: [],
      );

  Stream<int> tick({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_tick(port_),
      parseSuccessData: _wire2api_i32,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kTickConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTickConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "tick",
        argNames: [],
      );

  Stream<String> startP2P({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_start_p2p(port_),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kStartP2PConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStartP2PConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "start_p2p",
        argNames: [],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  FrbAnyhowException _wire2api_FrbAnyhowException(dynamic raw) {
    return FrbAnyhowException(raw as String);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
int api2wire_i32(int raw) {
  return raw;
}
// Section: finalizer

class Peer2PeerPlatform extends FlutterRustBridgeBase<Peer2PeerWire> {
  Peer2PeerPlatform(ffi.DynamicLibrary dylib) : super(Peer2PeerWire(dylib));

// Section: api2wire

// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class Peer2PeerWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Peer2PeerWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Peer2PeerWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_print_hello(
    int port_,
  ) {
    return _wire_print_hello(
      port_,
    );
  }

  late final _wire_print_helloPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_print_hello');
  late final _wire_print_hello =
      _wire_print_helloPtr.asFunction<void Function(int)>();

  void wire_add(
    int port_,
    int a,
    int b,
  ) {
    return _wire_add(
      port_,
      a,
      b,
    );
  }

  late final _wire_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Int32)>>('wire_add');
  late final _wire_add =
      _wire_addPtr.asFunction<void Function(int, int, int)>();

  void wire_subtract(
    int port_,
    int a,
    int b,
  ) {
    return _wire_subtract(
      port_,
      a,
      b,
    );
  }

  late final _wire_subtractPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Int32)>>('wire_subtract');
  late final _wire_subtract =
      _wire_subtractPtr.asFunction<void Function(int, int, int)>();

  void wire_get_ip_one(
    int port_,
  ) {
    return _wire_get_ip_one(
      port_,
    );
  }

  late final _wire_get_ip_onePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_ip_one');
  late final _wire_get_ip_one =
      _wire_get_ip_onePtr.asFunction<void Function(int)>();

  void wire_tick(
    int port_,
  ) {
    return _wire_tick(
      port_,
    );
  }

  late final _wire_tickPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_tick');
  late final _wire_tick = _wire_tickPtr.asFunction<void Function(int)>();

  void wire_start_p2p(
    int port_,
  ) {
    return _wire_start_p2p(
      port_,
    );
  }

  late final _wire_start_p2pPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_start_p2p');
  late final _wire_start_p2p =
      _wire_start_p2pPtr.asFunction<void Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
