// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';

class Peer2PeerPlatform extends FlutterRustBridgeBase<Peer2PeerWire> with FlutterRustBridgeSetupMixin {
  Peer2PeerPlatform(FutureOr<WasmModule> dylib) : super(Peer2PeerWire(dylib)) {
    setupMixinConstructor();
  }
  Future<void> setup() => inner.init;

// Section: api2wire

  @protected
  String api2wire_String(String raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_box_autoadd_log_entry(LogEntry raw) {
    return api2wire_log_entry(raw);
  }

  @protected
  Object api2wire_i64(int raw) {
    return castNativeBigInt(raw);
  }

  @protected
  List<dynamic> api2wire_log_entry(LogEntry raw) {
    return [
      api2wire_i64(raw.timeMillis),
      api2wire_i32(raw.level),
      api2wire_String(raw.tag),
      api2wire_String(raw.userId),
      api2wire_String(raw.user),
      api2wire_String(raw.msg)
    ];
  }

  @protected
  String? api2wire_opt_String(String? raw) {
    return raw == null ? null : api2wire_String(raw);
  }

  @protected
  Uint8List api2wire_uint_8_list(Uint8List raw) {
    return raw;
  }
// Section: finalizer
}

// Section: WASM wire module

@JS('wasm_bindgen')
external Peer2PeerWasmModule get wasmModule;

@JS()
@anonymous
class Peer2PeerWasmModule implements WasmModule {
  external Object /* Promise */ call([String? moduleName]);
  external Peer2PeerWasmModule bind(dynamic thisArg, String moduleName);
  external dynamic /* void */ wire_dummy(NativePortType port_, List<dynamic> a);

  external dynamic /* void */ wire_rust_set_up(NativePortType port_);

  external dynamic /* void */ wire_create_log_stream(NativePortType port_);

  external dynamic /* void */ wire_print_hello(NativePortType port_);

  external dynamic /* void */ wire_add(NativePortType port_, int a, int b);

  external dynamic /* void */ wire_subtract(NativePortType port_, int a, int b);

  external dynamic /* void */ wire_get_ip_one(NativePortType port_);

  external dynamic /* void */ wire_tick(NativePortType port_);

  external dynamic /* void */ wire_start_p2p(NativePortType port_, String? address);
}

// Section: WASM wire connector

class Peer2PeerWire extends FlutterRustBridgeWasmWireBase<Peer2PeerWasmModule> {
  Peer2PeerWire(FutureOr<WasmModule> module) : super(WasmModule.cast<Peer2PeerWasmModule>(module));

  void wire_dummy(NativePortType port_, List<dynamic> a) => wasmModule.wire_dummy(port_, a);

  void wire_rust_set_up(NativePortType port_) => wasmModule.wire_rust_set_up(port_);

  void wire_create_log_stream(NativePortType port_) => wasmModule.wire_create_log_stream(port_);

  void wire_print_hello(NativePortType port_) => wasmModule.wire_print_hello(port_);

  void wire_add(NativePortType port_, int a, int b) => wasmModule.wire_add(port_, a, b);

  void wire_subtract(NativePortType port_, int a, int b) => wasmModule.wire_subtract(port_, a, b);

  void wire_get_ip_one(NativePortType port_) => wasmModule.wire_get_ip_one(port_);

  void wire_tick(NativePortType port_) => wasmModule.wire_tick(port_);

  void wire_start_p2p(NativePortType port_, String? address) => wasmModule.wire_start_p2p(port_, address);
}
